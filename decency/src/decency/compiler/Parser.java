
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 01 15:03:47 CST 2013
//----------------------------------------------------

package decency.compiler;

import java.io.*;
import decency.compiler.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 01 15:03:47 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\005\000\002\004\007\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\005\000\002" +
    "\010\006\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\011\004\000\002\011\003" +
    "\000\002\017\004\000\002\012\006\000\002\013\002\000" +
    "\002\013\004\000\002\014\002\000\002\014\004\000\002" +
    "\015\007\000\002\015\013\000\002\020\005\000\002\020" +
    "\004\000\002\020\004\000\002\020\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\022" +
    "\006\000\002\022\003\000\002\023\003\000\002\023\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\012\006\001\002\000\006\002\126\012" +
    "\006\001\002\000\006\002\000\012\000\001\002\000\004" +
    "\033\007\001\002\000\004\014\010\001\002\000\004\015" +
    "\011\001\002\000\004\022\012\001\002\000\024\006\uffec" +
    "\007\uffec\012\uffec\013\uffec\022\uffec\023\uffec\024\uffec\033" +
    "\uffec\034\uffec\001\002\000\006\002\ufffd\012\ufffd\001\002" +
    "\000\024\006\uffea\007\uffea\012\017\013\uffea\022\uffea\023" +
    "\uffea\024\uffea\033\uffea\034\uffea\001\002\000\022\006\073" +
    "\007\062\013\070\022\012\023\074\024\061\033\031\034" +
    "\030\001\002\000\024\006\uffeb\007\uffeb\012\uffeb\013\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\033\uffeb\034\uffeb\001\002\000" +
    "\004\033\020\001\002\000\012\013\ufff7\016\053\020\ufff7" +
    "\021\ufff7\001\002\000\010\013\ufff9\020\ufff9\021\027\001" +
    "\002\000\006\013\ufffb\020\ufffb\001\002\000\006\013\025" +
    "\020\024\001\002\000\004\033\020\001\002\000\024\006" +
    "\ufffe\007\ufffe\012\ufffe\013\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\033\ufffe\034\ufffe\001\002\000\006\013\ufffc\020\ufffc\001" +
    "\002\000\006\033\031\034\030\001\002\000\060\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\001\002\000\060\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\001\002\000\024\010\036\011\035\013\uffd9" +
    "\015\uffd9\016\041\020\uffd9\030\040\031\042\032\037\001" +
    "\002\000\024\010\uffd7\011\uffd7\013\uffd7\015\uffd7\016\uffd7" +
    "\020\uffd7\030\uffd7\031\uffd7\032\uffd7\001\002\000\006\013" +
    "\ufffa\020\ufffa\001\002\000\006\033\031\034\030\001\002" +
    "\000\006\033\031\034\030\001\002\000\006\033\031\034" +
    "\030\001\002\000\006\033\031\034\030\001\002\000\006" +
    "\033\031\034\030\001\002\000\006\033\031\034\030\001" +
    "\002\000\012\013\uffdd\015\uffdd\016\041\020\uffdd\001\002" +
    "\000\004\017\045\001\002\000\034\010\uffd8\011\uffd8\013" +
    "\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\001\002\000\012\013" +
    "\uffde\015\uffde\016\041\020\uffde\001\002\000\012\013\uffdc" +
    "\015\uffdc\016\041\020\uffdc\001\002\000\012\013\uffda\015" +
    "\uffda\016\041\020\uffda\001\002\000\012\013\uffdb\015\uffdb" +
    "\016\041\020\uffdb\001\002\000\012\013\ufff8\016\056\020" +
    "\ufff8\021\ufff8\001\002\000\006\033\031\034\030\001\002" +
    "\000\004\017\055\001\002\000\012\013\ufff6\016\ufff6\020" +
    "\ufff6\021\ufff6\001\002\000\006\033\031\034\030\001\002" +
    "\000\004\017\060\001\002\000\012\013\ufff5\016\ufff5\020" +
    "\ufff5\021\ufff5\001\002\000\004\014\121\001\002\000\004" +
    "\014\111\001\002\000\032\010\036\011\035\013\uffd9\015" +
    "\uffd9\016\041\021\106\025\107\026\104\027\103\030\040" +
    "\031\042\032\037\001\002\000\022\006\ufff3\007\ufff3\013" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\033\ufff3\034\ufff3\001\002" +
    "\000\004\013\102\001\002\000\006\013\uffe3\015\uffe3\001" +
    "\002\000\022\006\uffe9\007\uffe9\013\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\033\uffe9\034\uffe9\001\002\000\022\006\uffef\007" +
    "\uffef\013\uffef\022\uffef\023\uffef\024\uffef\033\uffef\034\uffef" +
    "\001\002\000\022\006\ufff2\007\ufff2\013\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\033\ufff2\034\ufff2\001\002\000\036\004\100" +
    "\005\101\010\uffd7\011\uffd7\013\uffd7\015\uffd7\016\uffd7\021" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\001\002\000\006\033\031\034\030\001\002\000\026\002" +
    "\uffed\006\uffed\007\uffed\012\uffed\013\uffed\022\uffed\023\uffed" +
    "\024\uffed\033\uffed\034\uffed\001\002\000\022\006\ufff4\007" +
    "\ufff4\013\ufff4\022\ufff4\023\ufff4\024\ufff4\033\ufff4\034\ufff4" +
    "\001\002\000\022\006\ufff1\007\ufff1\013\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\033\ufff1\034\ufff1\001\002\000\022\006\uffee" +
    "\007\uffee\013\uffee\022\uffee\023\uffee\024\uffee\033\uffee\034" +
    "\uffee\001\002\000\006\013\uffe5\015\uffe5\001\002\000\006" +
    "\013\uffe4\015\uffe4\001\002\000\022\006\ufff0\007\ufff0\013" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\033\ufff0\034\ufff0\001\002" +
    "\000\006\033\uffe1\034\uffe1\001\002\000\006\033\uffdf\034" +
    "\uffdf\001\002\000\006\033\031\034\030\001\002\000\006" +
    "\033\uffe2\034\uffe2\001\002\000\006\033\uffe0\034\uffe0\001" +
    "\002\000\006\013\uffe6\015\uffe6\001\002\000\006\033\031" +
    "\034\030\001\002\000\004\013\113\001\002\000\006\033" +
    "\031\034\030\001\002\000\004\013\115\001\002\000\006" +
    "\033\031\034\030\001\002\000\004\015\117\001\002\000" +
    "\020\006\073\007\062\013\070\022\012\024\061\033\031" +
    "\034\030\001\002\000\022\006\uffe7\007\uffe7\013\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\033\uffe7\034\uffe7\001\002\000\006" +
    "\033\031\034\030\001\002\000\004\015\123\001\002\000" +
    "\020\006\073\007\062\013\070\022\012\024\061\033\031" +
    "\034\030\001\002\000\022\006\uffe8\007\uffe8\013\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\033\uffe8\034\uffe8\001\002\000\006" +
    "\002\uffff\012\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\006\002\003\004\004\001\001\000\004\004" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\012\001\001\000" +
    "\004\013\013\001\001\000\002\001\001\000\006\003\015" +
    "\014\014\001\001\000\024\011\074\012\063\015\070\016" +
    "\065\017\075\020\064\022\062\023\071\024\066\001\001" +
    "\000\002\001\001\000\010\005\022\006\021\007\020\001" +
    "\001\000\004\010\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\025\007\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\033" +
    "\022\031\023\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\050\023\032\001\001\000\006\022\047\023" +
    "\032\001\001\000\006\022\046\023\032\001\001\000\006" +
    "\022\045\023\032\001\001\000\004\023\043\001\001\000" +
    "\006\022\042\023\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\107\022" +
    "\031\023\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\065\020\111\022\062\023" +
    "\071\001\001\000\002\001\001\000\012\016\065\020\113" +
    "\022\062\023\071\001\001\000\002\001\001\000\012\016" +
    "\065\020\115\022\062\023\071\001\001\000\002\001\001" +
    "\000\024\011\074\012\063\015\070\016\065\017\075\020" +
    "\064\022\062\023\071\024\117\001\001\000\002\001\001" +
    "\000\012\016\065\020\121\022\062\023\071\001\001\000" +
    "\002\001\001\000\024\011\074\012\063\015\070\016\065" +
    "\017\075\020\064\022\062\023\071\024\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("\tParsing error");
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

      if (s.left >= 0) {
        m.append(" in line " + (s.left +1 ));
        if (s.right >= 0) {
          m.append(", column " + (s.right + 1));
        }
      }
    }
    m.append(" : " + message);
    System.err.println(m);
  }
	public void report_fatal_error(String message, Object info) {
		fatalError = true;
		report_error(message, info);
		System.exit(1);
	}

	public boolean error = false;
	public boolean fatalError = false;

	public Parser(InputStream inp) {
		this(new Yylex(inp));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  static decency.compiler.Symbol symbol(String s) {
    return decency.compiler.Symbol.symbol(s);
  }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primary_expression ::= NUM 
            {
              Primary_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int x = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new IntLiteral(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // primary_expression ::= ID 
            {
              Primary_expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Id(symbol(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // postfix_expression ::= primary_expression 
            {
              Postfix_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Primary_expression x = (Primary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // postfix_expression ::= postfix_expression LBRACK primary_expression RBRACK 
            {
              Postfix_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Primary_expression y = (Primary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Array_expression(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= postfix_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= postfix_expression GT postfix_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Postfix_expression y = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Expression(4,x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= postfix_expression LT postfix_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Postfix_expression y = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Expression(3,x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= postfix_expression ASTER postfix_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Postfix_expression y = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Expression(2,x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= postfix_expression MINUS postfix_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Postfix_expression y = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Expression(1,x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= postfix_expression PLUS postfix_expression 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Postfix_expression y = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Expression(0,x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignment_operator ::= SUBASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.SUBASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignment_operator ::= ADDASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.ADDASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignment_operator ::= MULASS 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.MULASS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignment_operator ::= ASSIGN 
            {
              Assignment_operator RESULT =null;
		RESULT=Assignment_operator.ASSIGN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignment_expression ::= expression 
            {
              Assignment_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Assignment_expression(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignment_expression ::= primary_expression DEC 
            {
              Assignment_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Primary_expression x = (Primary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Assignment_expression(x,Assignment_operator.SUBASS,new Expression(new IntLiteral(1)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assignment_expression ::= primary_expression INC 
            {
              Assignment_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Primary_expression x = (Primary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Assignment_expression(x,Assignment_operator.ADDASS,new Expression(new IntLiteral(1)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignment_expression ::= postfix_expression assignment_operator expression 
            {
              Assignment_expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Postfix_expression x = (Postfix_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Assignment_operator y = (Assignment_operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression z = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Assignment_expression(x,y,z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // iteration_statement ::= FOR LPAREN assignment_expression SEMICOLON assignment_expression SEMICOLON assignment_expression RPAREN statement 
            {
              Iteration_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Assignment_expression x = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Assignment_expression y = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Assignment_expression z = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new For_statement(x,y,z,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // iteration_statement ::= WHILE LPAREN assignment_expression RPAREN statement 
            {
              Iteration_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Assignment_expression x = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement y = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new While_statement(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statements ::= statements statement 
            {
              Statements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements x = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement y = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statements ::= 
            {
              Statements RESULT =null;
		RESULT=new Statements();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarations ::= declarations declaration 
            {
              Declarations RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declarations x = (Declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration y = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarations ::= 
            {
              Declarations RESULT =null;
		RESULT=new Declarations();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compound_statement ::= LBRACE declarations statements RBRACE 
            {
              Compound_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarations x = (Declarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statements y = (Statements)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Compound_statement(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // return_statement ::= RETURN primary_expression 
            {
              Return_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Primary_expression x = (Primary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Return_statement(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression_statement ::= SEMICOLON 
            {
              Expression_statement RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression_statement ::= assignment_expression SEMICOLON 
            {
              Expression_statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Assignment_expression x = (Assignment_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Expression_statement(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= return_statement 
            {
              Statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Return_statement x = (Return_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= iteration_statement 
            {
              Statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iteration_statement x = (Iteration_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= compound_statement 
            {
              Statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Compound_statement x = (Compound_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= expression_statement 
            {
              Statement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression_statement x = (Expression_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant_expressions ::= constant_expressions LBRACK primary_expression RBRACK 
            {
              Constant_expressions RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Constant_expressions x = (Constant_expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Primary_expression y = (Primary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expressions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant_expressions ::= LBRACK primary_expression RBRACK 
            {
              Constant_expressions RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Primary_expression x = (Primary_expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Constant_expressions(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_expressions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarator ::= ID 
            {
              Declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Declarator(new Id(symbol(x)), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarator ::= ID constant_expressions 
            {
              Declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant_expressions y = (Constant_expressions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Declarator(new Id(symbol(x)),y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // init_declarator ::= declarator 
            {
              Init_declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declarator x = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Init_declarator(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // init_declarator ::= declarator ASSIGN expression 
            {
              Init_declarator RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declarator x = (Declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Init_declarator(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarator",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // init_declarators ::= init_declarator 
            {
              Init_declarators RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Init_declarator x = (Init_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Init_declarators(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarators",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // init_declarators ::= init_declarators COMMA init_declarator 
            {
              Init_declarators RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Init_declarators x = (Init_declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Init_declarator y = (Init_declarator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=x.add(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_declarators",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_definition ::= INT ID LPAREN RPAREN compound_statement 
            {
              Function_definition RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Compound_statement z = (Compound_statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Function_definition(new Id(symbol(y)),z);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= INT init_declarators SEMICOLON 
            {
              Declaration RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Init_declarators y = (Init_declarators)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Declaration(y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program function_definition 
            {
              Program RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program x = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Function_definition y = (Function_definition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Program(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= function_definition 
            {
              Program RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Function_definition x = (Function_definition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Program(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

